#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');
var models = require("../models");
var socket = require("../routes/socket.js")
var io;


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

models.sequelize.sync().then(function () {
var server = http.createServer(app);
io = require('socket.io')(server);
  var server = app.listen(app.get('port'), function() {
    debug('Express server listening on port ' + server.address().port);
    io.listen(server);
    io.sockets.on('connection',socket);
    /*io.on('connection', function(socket){
      console.log("started");
      socket.on('timer started', function(msg){
        io.emit('timer started'+msg, msg);
      });
    });*/

  });

  server.on('error', onError);
});


//server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
